# @configure_input@

# the way to use the options set by configure is to include them below
include ../../config_defs

# otherwise, the way to set user options when configure is not used is to
# edit user_defs.mk manually and then include it below
#include user_defs.mk

include ../../system_defs.mk

# only build if graphics are enabled

ifeq ($(GRAPHICS), YES)

ProjectName=libgcb

ifndef CFG
CFG=libgw - Win32 Release
endif
CC=gcc
# DEL-BY-LEETEN 04/09/2011-BEGIN
# CFLAGS=-I ~/lib/include -I ~/lib/include/opencv -I ~/mylib/include -I /usr/local/cuda/include
# DEL-BY-LEETEN 04/09/2011-END
CXX=g++
CXXFLAGS=$(CFLAGS)
RC=windres -O COFF
ifeq "$(CFG)"  "libgcb - Win32 Debug"
CFLAGS+=-g -W -O0 -D_DEBUG -D_LIB -D_CRT_TERMINATE_DEFINED -D_UNICODE
AR=ar
TARGET=lib$(ProjectName).a
ARFLAGS=rus
else
ifeq "$(CFG)"  "libgcb - Win32 Release"
CFLAGS+=-g -W -DNDEBUG -D_LIB -D"_UNICODE" PRECOMP_VC7_TOBEREMOVED
AR=ar
TARGET=lib$(ProjectName).a
ARFLAGS=rus
endif
endif

ifndef TARGET
TARGET=lib$(ProjectName).a
endif

# position-independent code
ifeq ($(FPIC), YES)
CCFLAGS += -fPIC
endif

default: all
#default: $(TARGET)

Makefile: Makefile.in ../../config.status
	../../config.status $@

config.status: ../../configure
	../../config.status --recheck

.PHONY: all

ifeq ($(SO), YES) # static and dynamic libs
ifeq ($(ARCH), MAC_OSX_MPICH) # mac mpich
all: liblibgcb.a liblibgcb.dylib
else # not mac mpich
ifeq ($(ARCH), MAC_OSX_OMPI) # mac open mpi
all: liblibgcb.a liblibgcb.dylib
else # not mac: linux and others
all: liblibgcb.a liblibgcb.so
endif
endif
else # only static lib
all: liblibgcb.a
endif

#all: $(TARGET)

%.o: %.c
	$(CC) $(CFLAGS) $(CPPFLAGS) $(CCFLAGS) $(INCLUDE) -o $@ -c $<

%.o: %.cc
	$(CXX) $(CXXFLAGS) $(CPPFLAGS) $(CCFLAGS) $(INCLUDE) -o $@ -c $<

%.o: %.cpp
	$(CXX) $(CXXFLAGS) $(CPPFLAGS) $(CCFLAGS) $(INCLUDE) -o $@ -c $<

%.o: %.cxx
	$(CXX) $(CXXFLAGS) $(CPPFLAGS) $(CCFLAGS) $(INCLUDE) -o $@ -c $<

%.res: %.rc
	$(RC) $(CPPFLAGS) $(CCFLAGS) $(INCLUDE) -o $@ -i $<

SOURCE_FILES= \
	gcb.cpp

RESOURCE_FILES=

SRCS=$(SOURCE_FILES) $(HEADER_FILES) $(RESOURCE_FILES)  \
	ReadMe.txt

OBJS=$(patsubst %.rc,%.res,$(patsubst %.cxx,%.o,$(patsubst %.cpp,%.o,$(patsubst %.cc,%.o,$(patsubst %.c,%.o,$(filter %.c %.cc %.cpp %.cxx %.rc,$(SRCS)))))))

liblibgcb.dylib : $(OBJS)
	rm -f $@
	g++ -dynamiclib -Wl,-headerpad_max_install_names,-undefined,dynamic_lookup,-install_name,liblibgcb.dylib -o liblibgcb.dylib $(OBJS)

liblibgcb.so : $(OBJS)
	rm -f $@
	g++ -shared -Wl,-soname,liblibgcb.so -o liblibgcb.so -lc $(OBJS)

$(TARGET): $(OBJS) $(CUSTOM_OUTPUTS)
	$(AR) $(ARFLAGS) $@ $(OBJS)

.PHONY: clean
clean:
	-rm -f $(OBJS) $(TARGET) $(CUSTOM_OUTPUTS) $(ProjectName).dep *.dylib *.so

.PHONY: depends
depends:
	-$(CXX) $(CXXFLAGS) $(CPPFLAGS) -MM $(filter %.c %.cc %.cpp %.cxx,$(SRCS)) > $(ProjectName).dep

-include $(ProjectName).dep

endif
